@page "/crmtuyendoc"
@using NanoCell.Application.CRMTuyenDoc.Commands;
@using NanoCell.Application.CRMTuyenDoc.Queries;
@using MediatR;
@using Syncfusion.EJ2.Blazor.Grids;
@using Syncfusion.EJ2.Blazor.Buttons;
@using Syncfusion.EJ2.Blazor.Popups;
@using Syncfusion.EJ2.Blazor.Navigations;

@inject IToastService toastService;

@inject IMediator mediatR;

<div class="row page-titles">
    <div class="col-md-5 align-self-center">
        <h4 class="text-themecolor">Danh sách tuyến đọc</h4>
    </div>
    <div class="col-md-7 align-self-center text-right">
        <div class="d-flex justify-content-end align-items-center ">
            @*<button type="button" class="btn btn-info d-none d-lg-block m-l-15"><i class="fa fa-plus-circle"></i> Create New</button>*@
            <EjsButton @onclick="AddNewRecord" CssClass="e-info">Create New</EjsButton>
        </div>
    </div>
</div>
<div class="row ">
    <div class="col-12">
        <div class="card">
            <div class="card-body shadow">
                <EjsGrid @ref="@Grid" DataSource="@ListTuyenDoc" Height="100%" AllowPaging="true" AllowFiltering="true" AllowSorting="true" ShowColumnMenu="true" ColumnMenuItems="@columnMenu" Toolbar="@ToolbarIT">
                    <GridFilterSettings Type="Syncfusion.EJ2.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                    <GridPageSettings PageSize="20"></GridPageSettings>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" Dialog="DialogParams" ShowDeleteConfirmDialog="true"></GridEditSettings>
                    <GridEvents OnActionBegin="ActionBeginHandler" RowDataBound="OnRowDataBound" TValue="CRMTuyenDocOutputDto"></GridEvents>
                    <GridColumns>
                        <GridColumn Field="@nameof(CRMTuyenDocOutputDto.Id)" IsPrimaryKey="true" Visible="false" HeaderText="#"   TextAlign="Syncfusion.EJ2.Blazor.Grids.TextAlign.Left" Width="100" AllowEditing="false"></GridColumn>
                        <GridColumn Field="@nameof(CRMTuyenDocOutputDto.Name)" TextAlign="Syncfusion.EJ2.Blazor.Grids.TextAlign.Left"></GridColumn>
                        <GridColumn Field="@nameof(CRMTuyenDocOutputDto.Code)" TextAlign="Syncfusion.EJ2.Blazor.Grids.TextAlign.Left"></GridColumn>
                        <GridColumn Field="@nameof(CRMTuyenDocOutputDto.CreationTime)" AllowEditing="false" HeaderText="Created date" EditType="EditType.DatePickerEdit" TextAlign="Syncfusion.EJ2.Blazor.Grids.TextAlign.Right" Format="dd/MM/yyyy"></GridColumn>
                        <GridColumn>
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@( new CommandButtonOptions() { CssClass="e-info e-round e-small" ,IconCss= "e-icons e-edit" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@( new CommandButtonOptions() { CssClass="e-warning e-round e-small" ,IconCss= "e-icons e-delete" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@( new CommandButtonOptions() { CssClass="e-success e-round e-small" ,IconCss= "e-icons e-update" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@( new CommandButtonOptions() { CssClass="e-error e-round e-small" ,IconCss= "e-icons e-cancel-icon" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </EjsGrid>
            </div>
        </div>
    </div>
</div>


@code {
      //public string[] Toolbar = new string[] { "Search" };
    public List<ItemModel> ToolbarIT = new List<ItemModel>();
   

    public string[] columnMenu = new string[] { "ColumnChooser", "Filter" };
    EjsGrid<CRMTuyenDocOutputDto> Grid;
    public List<CRMTuyenDocOutputDto> ListTuyenDoc { get; set; }
    public static string Header { get; set; }
    long idAdded = 0;
    public object DialogParams = new
    {
@@params = new DialogModel { Header = Header }
    };

protected override async Task OnInitializedAsync()
{
    ToolbarIT.Add(new Syncfusion.EJ2.Blazor.Navigations.ItemModel { Text = "Refresh", Id = "refresh", TooltipText = "refresh", PrefixIcon = "mdi mdi-refresh" });
    ToolbarIT.Add(new Syncfusion.EJ2.Blazor.Navigations.ItemModel { Text = "Search", Id = "Search" });
    ListTuyenDoc = await mediatR.Send<List<CRMTuyenDocOutputDto>>(new GetAllCRMTuyenDocQuery());
}


public void AddNewRecord()
{
    Header = "Thêm mới tuyến đọc";
    this.Grid.AddRecord();
}


 

public void OnRowDataBound()
{
     if(idAdded>0)
    {
        SetId();

    }
}

public void SetId()
{
    var dt = ListTuyenDoc.Where(x => x.Id == 0).FirstOrDefault();
    if (dt != null)
    {
        dt.Id = idAdded;
        idAdded = 0;
    }

}

 
public void ActionBeginHandler(ActionEventArgs<CRMTuyenDocOutputDto> args)
{
    try
    {
        switch (args.RequestType)
        {
            case Syncfusion.EJ2.Blazor.Grids.Action.BeginEdit:
                Header = "Sửa tuyến đọc " + args.RowData.Id.ToString();
                break;
            case Syncfusion.EJ2.Blazor.Grids.Action.Save:
                if (args.Data.Id > 0)
                {
                    UpdateCRMTuyenDocCommand td = new UpdateCRMTuyenDocCommand();
                    td.Id = args.Data.Id;
                    td.Name = args.Data.Name;
                    td.Code = args.Data.Code;
                    Task.Run<Unit>(async () => await mediatR.Send(td));
                }
                else
                {
                    CreateCRMTuyenDocCommand td = new CreateCRMTuyenDocCommand();
                    td.Name = args.Data.Name;
                    td.Code = args.Data.Code;
                    idAdded= Task.Run<long>(async () =>await mediatR.Send<long>(td)).GetAwaiter().GetResult() ;
                }
                toastService.ShowSuccess("Cập nhật thành công!");
                break;
            case Syncfusion.EJ2.Blazor.Grids.Action.Delete:
                DeleteCRMTuyenDocCommand tddl = new DeleteCRMTuyenDocCommand();
                tddl.Id = args.Data.Id;
                Task.Run<Unit>(async () => await mediatR.Send(tddl));
                toastService.ShowSuccess("Xóa thành công!");
                break;
            case Syncfusion.EJ2.Blazor.Grids.Action.Cancel:
                break;
            case Syncfusion.EJ2.Blazor.Grids.Action.Add:
                Header = "Thêm mới tuyến đọc";
                break;
            default:
                break;
        }
    }
    catch (Exception ex)
    {
        args.Cancel = true;
        toastService.ShowError(ex.ToString());
    }
    // Here you can customize your code


}

}
